#
#
# Glewlwyd OAuth2 Authorization Server
#
# Copyright 2016-2017 Nicolas Mora <mail@babelouest.org>
# Gnu Public License V3 <http://fsf.org/>
#
#

# port to open for remote commands
port=4593

# url prefix
url_prefix="api"

# path to static files for /app url
static_files_path="/var/www/"

# static files prefix
static_files_prefix = "app"

# mime types for static files
static_files_mime_types =
(
  {
    extension = ".html"
    type = "text/html"
  },
  {
    extension = ".css"
    type = "text/css"
  },
  {
    extension = ".js"
    type = "application/javascript"
  },
  {
    extension = ".png"
    type = "image/png"
  },
  {
    extension = ".jpg"
    type = "image/jpeg"
  },
  {
    extension = ".jpeg"
    type = "image/jpeg"
  },
  {
    extension = ".ttf"
    type = "font/ttf"
  },
  {
    extension = ".woff"
    type = "font/woff"
  },
  {
    extension = ".woff2"
    type = "font/woff2"
  },
  {
    extension = ".map"
    type = "application/octet-stream"
  },
  {
    extension = ".ico"
    type = "image/x-icon"
  }
)

# access-control-allow-origin value
allow_origin="*"

# log mode (console, syslog, file)
log_mode="console"

# log level: NONE, ERROR, WARNING, INFO, DEBUG
log_level="DEBUG"

# output to log file (required if log_mode is file)
log_file="/tmp/glewlwyd.log"

# use scope for access control (default false)
use_scope=true

# refresh token expiration in seconds, default is 2 weeks
refresh_token_expiation=1209600

# access token expiration in seconds, default is 1 hour
access_token_expiration=3600

# session expiration, default is 4 weeks
session_expiration=2419200

# session key
session_key="GLEWLWYD_SESSION_ID"

# admin scope name
admin_scope="g_admin"

# profile scope name
profile_scope="g_profile"

# additional property name that will be included in access tokens
additional_property_name  = "new_property"

# code expiration in seconds, default is 10 minutes
code_expiration=600

# TLS/SSL configuration values
use_secure_connection=false
secure_connection_key_file="cert.key"
secure_connection_pem_file="cert.pem"

# login and grant urls
login_url="https://example.org/glewlwyd/app/login.html?"
grant_url="https://example.org/glewlwyd/app/grant.html?"

# Reset password configuration
reset_password=true # optional, default false
reset_password_config = 
{
# SMTP parameters
  smtp_host="localhost"         # mandatory
  smtp_port=25                  # optional, default 25
  smtp_use_tls=false            # optional, default false
  smtp_verify_certificate=false # optional, default false
#  smtp_user="user"             # optional, default no value
#  smtp_password="password"     # optional, default no value
  
  token_expiration=604800                                                                     # in seconds, optional, default 604800
  email_from="glewlwyd@example.org"                                                           # mandatory
  email_subject="Glewlwyd email reset"                                                        # mandatory
  email_template="reset.eml"                                                                  # mandatory
  page_url_prefix="https://example.org/glewlwyd/app/reset.html?user=$USERNAME&code=$TOKEN"    # mandatory
}

# Algorithms available are SHA1, SHA256, SHA512, MD5, default is SHA256
hash_algorithm = "SHA256"

# MariaDB/Mysql database connection
database =
{
  type = "mariadb";
  host = "localhost";
  user = "glewlwyd";
  password = "glewlwyd";
  dbname = "glewlwyd";
  port = 0;
};

# SQLite database connection
# database =
# {
#    type               = "sqlite3";
#    path               = "/tmp/glewlwyd.db";
# };

# Authentication configuration
authentication =
{

   http_auth                = true
   http_auth_url            = "https://example.com/auth/validate"		# mandatory

   database_auth            = true
   
   ldap_auth                = true
   uri                      = "ldap://localhost"
   bind_dn                  = "cn=operator,dc=example,dc=org"
   bind_passwd              = "password"
   
   base_search_user               = "ou=user,dc=example,dc=org"
# Read parameters
   filter_user_read               = "objectClass=inetOrgPerson"
   login_property_user_read       = "cn"
   scope_property_user_read       = "o"
   email_property_user_read       = "mail"
   name_property_user_read        = "sn"
   additional_property_value_read = "memberOf" # will fill the jwt property `group` with the content of the LDAP property `memberOf`, optional, leave empty if no use
# Write parameters
   ldap_user_write                 = true
   rdn_property_user_write         = "cn"           # Single value
   login_property_user_write       = "cn"           # Multiple values separated by a comma
   scope_property_user_write       = "o"            # Multiple values separated by a comma
   email_property_user_write       = "mail"         # Multiple values separated by a comma
   additional_property_value_write = "memberOf"     # Multiple values separated by a comma
   name_property_user_write        = "sn"          
   password_property_user_write    = "userPassword" # Single value
   password_algorithm_user_write   = "SSHA"         # Single value, values available are SSHA, SHA, SMD5, MD5 or PLAIN
   object_class_user_write         = "top,person,organizationalPerson,inetOrgPerson" # Multiple values separated by a comma
   
   base_search_client             = "ou=client,dc=example,dc=org"
# Read parameters
   filter_client_read                = "objectClass=inetOrgPerson"
   client_id_property_client_read    = "cn"
   scope_property_client_read        = "o"
   name_property_client_read         = "sn"
   description_property_client_read  = "description"
   redirect_uri_property_client_read = "labeledURI"
   confidential_property_client_read = "employeeType"
# Write parameters
   ldap_client_write                  = true
   rdn_property_client_write          = "cn"          # Single value
   client_id_property_client_write    = "cn"          # Multiple values separated by a comma
   scope_property_client_write        = "o"           # Multiple values separated by a comma
   name_property_client_write         = "sn"          # Multiple values separated by a comma
   description_property_client_write  = "description" # Multiple values separated by a comma
   redirect_uri_property_client_write = "labeledURI"  # Multiple values separated by a comma
   password_property_client_write     = "userPassword"# Single value
   confidential_property_client_write = "employeeType"
   password_algorithm_client_write    = "SSHA"        # Single value, values available are SSHA, SHA, SMD5, MD5 or PLAIN
   object_class_client_write          = "top,person,organizationalPerson,inetOrgPerson" # Multiple values separated by a comma
}

# jwt parameters
jwt =
{
   # key size for algorithms, values available are 256, 384 or 512, default 512
   key_size = 512
   
   # Use RSA algorithm to sign tokens (asymetric)
   use_rsa = false
   
   # path to the key (private) certificate file to sign tokens
   rsa_key_file = "private.key"
   
   # path to the public certificate file to validate signatures
   rsa_pub_file = "public.pem"
   
   # Use ECDSA algorithm to sign tokens (asymetric)
   use_ecdsa = false
   
   # path to the key (private) certificate file to sign tokens
   ecdsa_key_file = "private.key"
   
   # path to the public certificate file to validate signatures
   ecdsa_pub_file = "public.pem"
   
   # Use SHA algorithm to sign tokens (symetric)
   use_sha = true
   
   # characters used to generate and validate the token
   sha_secret = "secret"
}
